<?php

namespace Sunnysideup\Ecommerce\Pages;

use PageController;
<<<<<<< HEAD
use SilverStripe\Control\Director;
use SilverStripe\Core\Config\Config;
use SilverStripe\Core\Convert;
use SilverStripe\ORM\ArrayList;
use SilverStripe\ORM\DataList;
use SilverStripe\ORM\PaginatedList;
<<<<<<< HEAD
=======
use SilverStripe\ORM\SS_List;
use SilverStripe\Security\Security;
>>>>>>> master
=======
use SilverStripe\Control\Controller;
use SilverStripe\Control\Director;
use SilverStripe\Control\Session;
use SilverStripe\Core\Config\Config;
use SilverStripe\Core\Convert;
use SilverStripe\ORM\ArrayList;
use SilverStripe\ORM\DataObject;
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
use SilverStripe\View\ArrayData;
use SilverStripe\View\Requirements;
use Sunnysideup\Ecommerce\Api\ShoppingCart;
use Sunnysideup\Ecommerce\Config\EcommerceConfig;
use Sunnysideup\Ecommerce\Forms\ProductSearchForm;
use Sunnysideup\Ecommerce\Helpers\CachingHelper;

class ProductGroupController extends PageController
{
    /**
     * The original Title of this page before filters, etc...
     *
     * @var string
     */
    protected $originalTitle = '';

    /**
     * The group filter that is applied to this page.
     *
     * @var ProductGroup
     */
    protected $filterForGroupObject = null;

    /**
     * Is this a product search?
     *
     * @var bool
     */
    protected $isSearchResults = false;

    /**
     * variable to make sure secondary title only gets
     * added once.
     *
     * @var bool
     */
    protected $secondaryTitleHasBeenAdded = false;

<<<<<<< HEAD
<<<<<<< HEAD
=======
    /****************************************************
     *  Search Form Related controllers
    /****************************************************/

    protected $searchForm = null;

    protected $searchKeyword = '';

    private static $product_search_session_variable = 'EcomProductSearch';

    /**
     * standard SS variable.
     *
     * @var array
     */
>>>>>>> master
=======
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
    private static $allowed_actions = [
        'debug' => 'ADMIN',
        'filterforgroup' => true,
        'ProductSearchForm' => true,
        'searchresults' => true,
        'resetfilter' => true,
    ];

<<<<<<< HEAD
    private static $extensions = [
        CachingHelper::class
=======
    //@todo: why not use trait?
    private static $extensions = [
        CachingHelper::class,
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
    ];

    public function index()
    {
        $this->addSecondaryTitle();

        if ($this->returnAjaxifiedProductList()) {
            return $this->renderWith('Sunnysideup\Ecommerce\Includes\AjaxProductList');
        }

        return [];
    }

    /**
     * Cross filter with another product group..
     *
     * e.g. socks (current product group) for brand A or B (the secondary product group)
     *
     * @return \SilverStripe\Control\HTTPRequest
     */
    public function filterforgroup($request)
    {
        $this->resetfilter();
        $otherGroupURLSegment = Convert::raw2sql($request->param('ID'));
        $arrayOfIDs = [0 => 0];
        if ($otherGroupURLSegment) {
<<<<<<< HEAD
            $otherProductGroup = ProductGroup::get()->filter([
                'URLSegment' => $otherGroupURLSegment
            ]);

=======
            $otherProductGroup = DataObject::get_one(
                ProductGroup::class,
                ['URLSegment' => $otherGroupURLSegment]
            );
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
            if ($otherProductGroup) {
                $this->filterForGroupObject = $otherProductGroup;

                $arrayOfIDs = $otherProductGroup->currentInitialProductsAsCachedArray($this->getMyUserPreferencesDefault('FILTER'));
            }
        }

        $this->addSecondaryTitle();
        $this->products = $this->paginateList($this->ProductsShowable(['ID' => $arrayOfIDs]));

        if ($this->returnAjaxifiedProductList()) {
            return $this->RenderWith('Sunnysideup\Ecommerce\Includes\AjaxProductList');
        }

        return [];
    }

    /**
     * name for session variable where we store the last search results for this page.
     * @return string
     */
    public function SearchResultsSessionVariable(): string
    {
        $idString = '_' . $this->ID;

        return $this->Config()->get('product_search_session_variable') . $idString;
    }

    /**
     * @return array
     */
    public function searchResultsArrayFromSession(): array
    {
        return [];
        return $this->ProductSearchForm()->getProductIds();
    }

    /**
     * @return array
     */
    public function searchResultsProductGroupsArrayFromSession(): array
    {
        return $this->ProductSearchForm()->getProductGroupIds();
    }

    /**
     * get the search results.
     *
     * @param \SilverStripe\Control\HTTPRequest $request
     * @param array
     */
<<<<<<< HEAD
    public function searchresults()
    {
        $this->isSearchResults = true;
<<<<<<< HEAD

        $title = $this->ProductSearchForm()->getLastSearchPhase();

=======
=======
    public function searchresults($request)
    {
        $this->isSearchResults = true;
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
        $this->searchHash = $this->request->param('ID');
        $this->ProductSearchForm(true);
        //set last search results
        if ($this->searchHash) {
            $this->getRequest()->getSession()->set(
                $this->SearchResultsSessionVariable(),
                $this->searchHash
            );
        }
        //get results array
        $keyword = $this->ProductSearchForm()->getSearchPhrase();
<<<<<<< HEAD
>>>>>>> master
        if ($title) {
            $title = _t('Ecommerce.SEARCH_FOR', 'search for: ') . substr($keyword, 0, 25);
        }
<<<<<<< HEAD

        $this->addSecondaryTitle($title);
=======
        //filters are irrelevant right now
        $this->resetfilter();
        $this->addSecondaryTitle($title);
        $this->products = $this->paginateList(
            $this->ProductsShowable(
                ['ID' => $resultArray],
                $this->getSearchResultsDefaultSort($this->searchResultsArrayFromSession())
            )
        );
>>>>>>> master
=======
        if ($keyword) {
            $keyword = _t('Ecommerce.SEARCH_FOR', 'search for: ') . substr($keyword, 0, 25);
        }
        //filters are irrelevant right now
        $this->resetfilter();
        $this->addSecondaryTitle($keyword);
        //@todo!
        // $this->products = $this->paginateList(
        //     $this->ProductsShowable(
        //         ['ID' => $resultArray],
        //         $this->getSearchResultsDefaultSort($this->searchResultsArrayFromSession())
        //     )
        // );
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e

        return [];
    }

    /**
     * Resets the filter only.
     */
    public function resetfilter()
    {
        $defaultKey = $this->getMyUserPreferencesDefault('FILTER');
        $filterGetVariable = $this->getSortFilterDisplayNames('FILTER', 'getVariable');

        $this->saveUserPreferences([
            $filterGetVariable => $defaultKey,
        ]);

        return [];
    }

    /**
     * resets the sort only.
     */
    public function resetsort()
    {
        $defaultKey = $this->getMyUserPreferencesDefault('SORT');
        $sortGetVariable = $this->getSortFilterDisplayNames('SORT', 'getVariable');
        $this->saveUserPreferences(
            [
                $sortGetVariable => $defaultKey,
            ]
        );

        return [];
    }

    /**
     * Return the products for this group.
     *
     * This is the call that is made from the template and has the actual final
     * products being shown.
     *
     * @return \SilverStripe\ORM\PaginatedList
     */
    public function Products()
    {
        $this->addSecondaryTitle();
        $this->cachingRelatedJavascript();

        return $this->getProductList()->getPaginatedList();
    }

    /**
     * Is the product list cache-able?
     *
     * @return bool
     */
    public function ProductGroupListAreCacheable()
    {
        if ($this->productListsHTMLCanBeCached()) {
            if ($this->IsSearchResults()) {
                return false;
            }

            $currentOrder = ShoppingCart::current_order();

            if ($currentOrder->getHasAlternativeCurrency()) {
                return false;
            }

            return true;
        }

        return false;
    }

    /**
     * is the product list ajaxified.
     *
     * @return bool
     */
    public function ProductGroupListAreAjaxified()
    {
        return $this->IsSearchResults() ? false : true;
    }

    /**
     * Unique caching key for the product list...
     *
     * @return string | Null
     */
    public function ProductGroupListCachingKey()
    {
        if ($this->ProductGroupListAreCacheable()) {
            $displayKey = $this->getCurrentUserPreferences('DISPLAY');
            $filterKey = $this->getCurrentUserPreferences('FILTER');
            $filterForGroupKey = $this->filterForGroupObject ? $this->filterForGroupObject->ID : 0;
            $sortKey = $this->getCurrentUserPreferences('SORT');
            $pageStart = $this->request->getVar('start') ? intval($this->request->getVar('start')) : 0;
            return $this->cacheKey(
                implode(
                    '_',
                    [
                        $displayKey,
                        $filterKey,
                        $filterForGroupKey,
                        $sortKey,
<<<<<<< HEAD
                        $pageStart
=======
                        $pageStart,
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
                    ]
                )
            );
        }

        return;
    }

    /**
     * adds Javascript to the page to make it work when products are cached.
     */
    public function CachingRelatedJavascript()
    {
        if ($this->ProductGroupListAreAjaxified()) {
            Requirements::customScript(
                "
                    if(typeof EcomCartOptions === 'undefined') {
                        var EcomCartOptions = {};
                    }
                    EcomCartOptions.ajaxifyProductList = true;
                    EcomCartOptions.ajaxifiedListHolderSelector = '#" . $this->AjaxDefinitions()->ProductListHolderID() . "';
                    EcomCartOptions.ajaxifiedListAdjusterSelectors = '." . $this->AjaxDefinitions()->ProductListAjaxifiedLinkClassName() . "';
                    EcomCartOptions.hiddenPageTitleID = '#" . $this->AjaxDefinitions()->HiddenPageTitleID() . "';
                ",
                'cachingRelatedJavascript_AJAXlist'
            );
        } else {
            Requirements::customScript(
                "
                    if(typeof EcomCartOptions === 'undefined') {
                        var EcomCartOptions = {};
                    }
                    EcomCartOptions.ajaxifyProductList = false;
                ",
                'cachingRelatedJavascript_AJAXlist'
            );
        }
        $currentOrder = ShoppingCart::current_order();
        if ($currentOrder->TotalItems(true)) {
            $responseClass = EcommerceConfig::get(ShoppingCart::class, 'response_class');
            $obj = new $responseClass();
            $obj->setIncludeHeaders(false);
            $json = $obj->ReturnCartData();
            Requirements::customScript(
                "
                    if(typeof EcomCartOptions === 'undefined') {
                        var EcomCartOptions = {};
                    }
                    EcomCartOptions.initialData= " . $json . ';
                ',
                'cachingRelatedJavascript_JSON'
            );
        }
    }

    /**
     * title without additions.
     *
     * @return string
     */
    public function OriginalTitle()
    {
        return $this->originalTitle;
    }

    /**
     * This method can be extended to show products in the side bar.
     */
    public function SidebarProducts()
    {
        return;
    }

    /**
     * Returns child product groups for use in 'in this section'. For example
     * the vegetable Product Group may have listed here: Carrot, Cabbage, etc...
     *
     * @return \SilverStripe\ORM\DataList
     */
    public function MenuChildGroups()
    {
        return $this->ChildGroups(2, [
<<<<<<< HEAD
            'ShowInMenus' => 1
=======
            'ShowInMenus' => 1,
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
        ]);
    }

    /**
<<<<<<< HEAD
     * After a search is conducted you may end up with a bunch of recommended
     * product groups. They will be returned here.
     *
     * We sort the list in the order that it is provided.
     *
     * @return \SilverStripe\ORM\DataList
     */
    public function SearchResultsChildGroups(): DataList
    {
<<<<<<< HEAD
        return $this->ProductSearchForm()->getProductGroups();
    }

    /**
     * Returns a search form to search current products.
     *
     * @return ProductSearchForm object
     */
    public function ProductSearchForm(): ProductSearchForm
    {
        if (!$this->productSearchForm) {
            $onlySearchTitle = $this->originalTitle;
            $form = ProductSearchForm::create(
                $this,
                'ProductSearchForm',
                $onlySearchTitle,
                $this->getProductList(null, $this->getMyUserPreferencesDefault('FILTER'))
            );
            $filterGetVariable = $this->getSortFilterDisplayNames('FILTER', 'getVariable');
            $sortGetVariable = $this->getSortFilterDisplayNames('SORT', 'getVariable');
            $additionalGetParameters =
                $filterGetVariable . '=' . $this->getMyUserPreferencesDefault('FILTER') . '&' .
                $sortGetVariable . '=' . Config::inst()->get(ProductGroupSearchPage::class, 'best_match_key');
            $form->setAdditionalGetParameters($additionalGetParameters);

            $this->productSearchForm = $form;
=======
=======
     * After a search is conducted you may end up with a bunch
     * of recommended product groups. They will be returned here...
     * We sort the list in the order that it is provided.
     *
     * @return \SilverStripe\ORM\DataList | Null (ProductGroups)
     */
    public function SearchResultsChildGroups()
    {
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
        $groupArray = $this->searchResultsProductGroupsArrayFromSession();
        if (! empty($groupArray)) {
            $sortStatement = $this->createSortStatementFromIDArray($groupArray, ProductGroup::class);

            return ProductGroup::get()
                ->filter(['ID' => $groupArray, 'ShowInSearch' => 1])
                ->sort($sortStatement);
        }

        return;
    }

    /**
     * returns a search form to search current products.
     * @param bool $forceInit optional - force to be reinitialised.
     * @return ProductSearchForm object
     */
    public function ProductSearchForm(?bool $forceInit = false)
    {
        if ($this->searchForm === null || $forceInit) {
            $onlySearchTitle = $this->originalTitle;
            if ($this->dataRecord instanceof ProductGroupSearchPage) {
                if ($this->HasSearchResults()) {
                    $onlySearchTitle = 'Last Search Results';
                }
            }
            $this->searchForm = ProductSearchForm::create(
                $this,
<<<<<<< HEAD
                'ProductSearchForm',
=======
<<<<<<< HEAD
                'ProductSearchForm'
=======
                'ProductSearchForm',
                $onlySearchTitle,
                $this->getProductList(null, $this->getMyUserPreferencesDefault('FILTER'))
>>>>>>> b157407766c563f75b3692e6d9cbb82278bf63ce
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
            );
            // $sortGetVariable = $this->getSortFilterDisplayNames('SORT', 'getVariable');
            // $additionalGetParameters = $sortGetVariable . '=' . Config::inst()->get(ProductGroupSearchPage::class, 'best_match_key');
            // $form->setAdditionalGetParameters($additionalGetParameters);
            // $form->setSearchHash($this->searchKeyword);
        }

        return $this->searchForm;
    }

    /**
     * Does this page have any search results?
     * If search was carried out without returns
     * then it returns zero (false).
<<<<<<< HEAD
     *
=======
     * @todo: to cleanup
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
     * @return bool
     */
    public function HasSearchResults(): bool
    {
        $resultArray = $this->searchResultsArrayFromSession();
        if (! empty($resultArray)) {
            $count = count($resultArray) - 1;

            return $count ? true : false;
<<<<<<< HEAD
>>>>>>> master
        }

        return $this->productSearchForm;
=======
        }

        return false;
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
    }

    /**
     * Should the product search form be shown immediately?
     *
     * @return bool
     */
    public function ShowSearchFormImmediately()
    {
        if ($this->IsSearchResults()) {
            return true;
        }

        if (! $this->products || ($this->products && $this->products->count())) {
            return false;
        }

        return true;
    }

    /**
     * Show a search form on this page?
     *
     * @return bool
     */
    public function ShowSearchFormAtAll()
    {
        return true;
    }

    /**
     * Is the current page a display of search results.
     *
     * This does not mean that something is actively being search for,
     * it could also be just "showing the search results"
     *
     * @return bool
     */
    public function IsSearchResults()
    {
        return $this->isSearchResults;
    }

    /**
     * Is there something actively being searched for?
     *
     * This is different from IsSearchResults.
     *
     * @return bool
     */
    public function ActiveSearchTerm(): bool
    {
<<<<<<< HEAD
<<<<<<< HEAD
        $var = Config::inst()->get(ProductSearchForm::class, 'form_data_session_variable');
        $data = $this->getRequest()->getSession()->get($var);

        if (! empty($data['Keyword'])) {
            return $this->IsSearchResults();
        }
=======
        return $this->request->getVar('Keyword') || $this->request->getVar('searchcode') ? true : false;
>>>>>>> master
=======
        return $this->request->getVar('Keyword') || $this->request->getVar('searchcode') ? true : false;
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
    }

    /**
     * Do we show all products on one page?
     *
     * @return bool
     */
    public function ShowFiltersAndDisplayLinks()
    {
        if ($this->getProductList()->CountGreaterThanOne()) {
            if ($this->HasFilters()) {
                return true;
            }
            if ($this->DisplayLinks()) {
                return true;
            }
        }

        return false;
    }

    /**
     * Do we show the sort links.
     *
     * A bit arbitrary to say three,
     * but there is not much point to sort three or less products
     *
     * @return bool
     */
    public function ShowSortLinks($minimumCount = 3)
    {
        if ($this->getProductList()->CountGreaterThanOne($minimumCount)) {
            return true;
        }

        return false;
    }

    /**
     * Is there a special filter operating at the moment?
     *
     * Is the current filter the default one (return inverse!)?
     *
     * @return bool
     */
    public function HasFilter()
    {
        return $this->getCurrentUserPreferences('FILTER') !== $this->getMyUserPreferencesDefault('FILTER')
            ||
            $this->filterForGroupObject;
    }

    /**
     * Is there a special sort operating at the moment?
     * Is the current sort the default one (return inverse!)?
     *
     * @return bool
     */
    public function HasSort()
    {
        $sort = $this->getCurrentUserPreferences('SORT');

        if ($sort !== $this->getMyUserPreferencesDefault('SORT')) {
            return true;
        }
    }

    /**
<<<<<<< HEAD
     * @return bool
=======
     * @return boolean
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
     */
    public function HasFilterOrSort()
    {
        return $this->HasFilter() || $this->HasSort();
    }

    /**
<<<<<<< HEAD
<<<<<<< HEAD
     * Are filters available? we check one at the time so that we do the least
=======
     * @return bool
     */
    public function HasFilterOrSortFullList()
    {
        return $this->HasFilterOrSort() || $this->IsShowFullList();
    }

    /**
     * are filters available?
     * we check one at the time so that we do the least
>>>>>>> master
=======
     * Are filters available? we check one at the time so that we do the least
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
     * amount of DB queries.
     *
     * @return bool
     */
    public function HasFilters()
    {
        $countFilters = $this->FilterLinks()->count();
        if ($countFilters > 1) {
            return true;
        }
        $countGroupFilters = $this->ProductGroupFilterLinks()->count();
        if ($countGroupFilters > 1) {
            return true;
        }
        if ($countFilters + $countGroupFilters > 1) {
            return true;
        }

        return false;
    }

    /**
     * Returns the current filter applied to the list in a human readable
     *  string.
     *
     * @return string
     */
    public function CurrentDisplayTitle()
    {
        $displayKey = $this->getCurrentUserPreferences('DISPLAY');
        if ($displayKey !== $this->getMyUserPreferencesDefault('DISPLAY')) {
            return $this->getUserPreferencesTitle('DISPLAY', $displayKey);
        }
    }

    /**
     * returns the current filter applied to the list
     * in a human readable string.
     *
     * @return string
     */
    public function CurrentFilterTitle()
    {
        $filterKey = $this->getCurrentUserPreferences('FILTER');
        $filters = [];
        if ($filterKey !== $this->getMyUserPreferencesDefault('FILTER')) {
            $filters[] = $this->getUserPreferencesTitle('FILTER', $filterKey);
        }
        if ($this->filterForGroupObject) {
            $filters[] = $this->filterForGroupObject->MenuTitle;
        }
        if (count($filters)) {
            return implode(', ', $filters);
        }
    }

    /**
     * returns the current sort applied to the list
     * in a human readable string.
     *
     * @return string
     */
    public function CurrentSortTitle()
    {
        $sortKey = $this->getCurrentUserPreferences('SORT');
        if ($sortKey !== $this->getMyUserPreferencesDefault('SORT')) {
            return $this->getUserPreferencesTitle('SORT', $sortKey);
        }
    }

    /**
     * short-cut for getMyUserPreferencesDefault("DISPLAY")
     * for use in templtes.
     *
     * @return string - key
     */
    public function MyDefaultDisplayStyle()
    {
        return $this->getMyUserPreferencesDefault('DISPLAY');
    }

    /**
     * Number of entries per page limited by total number of pages available...
     *
     * @return int
     */
    public function MaxNumberOfProductsPerPage(): int
    {
        return $this->getProductsPerPage() > $this->TotalCount() ? $this->TotalCount() : $this->getProductsPerPage();
    }

    /**
     * Provides a ArrayList of links for filters products.
     *
     * @return \SilverStripe\ORM\ArrayList( ArrayData(Name, Link, SelectKey, Current (boolean), LinkingMode))
     */
    public function FilterLinks()
    {
        $list = $this->userPreferencesLinks('FILTER');

        foreach ($list as $obj) {
            $key = $obj->SelectKey;
            if ($key !== $this->getMyUserPreferencesDefault('FILTER')) {
                // @todo
                $count = 1;

                if ($count === 0) {
                    $list->remove($obj);
                } else {
                    $obj->Count = $count;
                }
            }
        }

        $selectedItem = $this->getCurrentUserPreferences('FILTER');
        foreach ($list as $obj) {
            $canHaveCurrent = true;
            if ($this->filterForGroupObject) {
                $canHaveCurrent = false;
            }
            $obj->Current = $selectedItem === $obj->SelectKey && $canHaveCurrent ? true : false;
            $obj->LinkingMode = $obj->Current ? 'current' : 'link';
            $obj->Ajaxify = true;
        }

        return $list;
    }

    /**
     * returns a list of items (with links).
     *
     * @return \SilverStripe\ORM\ArrayList( ArrayData(Name, FilterLink,  SelectKey, Current (boolean), LinkingMode))
     */
    public function ProductGroupFilterLinks()
    {
        $arrayOfItems = [];

<<<<<<< HEAD
        $baseArray = $this->getProductList();
=======
        $baseArray = $this->getProductList()->getProductIds();
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e

        $items = $this->getProductGroupsFromAlsoShowProducts();

        if ($items) {
            $arrayOfItems = array_merge($arrayOfItems, $this->productGroupFilterLinksCount($items, $baseArray, true));
        }

        $items = $this->getProductGroupsFromAlsoShowProductsInverse();

        if ($items) {
            $arrayOfItems = array_merge($arrayOfItems, $this->productGroupFilterLinksCount($items, $baseArray, true));
        }

        $items = $this->getProductGroupsParentGroups();

        if ($items) {
            $arrayOfItems = array_merge($arrayOfItems, $this->productGroupFilterLinksCount($items, $baseArray, true));
        }

        $items = $this->MenuChildGroups();

        if ($items) {
            $arrayOfItems = array_merge($arrayOfItems, $this->productGroupFilterLinksCount($items, $baseArray, true));
        }

        ksort($arrayOfItems);
        $array = [];

        foreach ($arrayOfItems as $arrayOfItem) {
            $array[] = $this->makeArrayItem($arrayOfItem);
        }

        $arrayList = ArrayList::create();
        foreach ($array as $item) {
            $arrayList->push(ArrayData::create($item));
        }

        return $arrayList;
    }

    /**
     * @see ProductGroupFilterLinks
     * same as ProductGroupFilterLinks, but with originating Object...
     *
     * @return \SilverStripe\ORM\ArrayList
     */
    public function ProductGroupFilterOriginalObjects()
    {
        $links = $this->ProductGroupFilterLinks();
        // /print_r($links);
        foreach ($links as $linkItem) {
            $className = $linkItem->ClassName;
            $id = $linkItem->ID;
            if ($className && $id) {
                $object = $className::get()->byID($id);
                $linkItem->Object = $object;
            }
        }

        return $links;
    }

    /**
     * Provides a ArrayList of links for sorting products.
     */
    public function SortLinks()
    {
        $list = $this->userPreferencesLinks('SORT');
        $selectedItem = $this->getCurrentUserPreferences('SORT');
        if ($list) {
            foreach ($list as $obj) {
                $obj->Current = $selectedItem === $obj->SelectKey ? true : false;
                $obj->LinkingMode = $obj->Current ? 'current' : 'link';
                $obj->Ajaxify = true;
            }

            return $list;
        }
    }

    /**
     * Provides a ArrayList for displaying display links.
     */
    public function DisplayLinks()
    {
        $list = $this->userPreferencesLinks('DISPLAY');
        $selectedItem = $this->getCurrentUserPreferences('DISPLAY');
        if ($list) {
            foreach ($list as $obj) {
                $obj->Current = $selectedItem === $obj->SelectKey ? true : false;
                $obj->LinkingMode = $obj->Current ? 'current' : 'link';
                $obj->Ajaxify = true;
            }

            return $list;
        }
    }

    /**
     * The link that Google et al. need to index.
     *
     * @return string
     */
    public function CanonicalLink()
    {
        $link = $this->AbsoluteLink();
        $this->extend('updateCanonicalLink', $link);

        return $link;
    }

    /**
<<<<<<< HEAD
=======
     * Link that returns a list of all the products
     * for this product group as a simple list.
     *
     * @return string
     */
    public function ListAllLink()
    {
        if ($this->filterForGroupObject) {
            return $this->Link('filterforgroup/' . $this->filterForGroupObject->URLSegment) . '?showfulllist=1';
        }
        return $this->Link() . '?showfulllist=1';
    }

    /**
     * Link that returns a list of all the products
     * for this product group as a simple list.
     *
     * @return string
     */
    public function ListAFewLink()
    {
        return str_replace('?showfulllist=1', '', $this->ListAllLink());
    }

    /**
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
     * Link that returns a list of all the products for this product group as a
     * simple list. It resets everything; not just filter.
     *
     * @param bool $escapedAmpersands
     *
     * @return string
     */
    public function ResetPreferencesLink($escapedAmpersands = true)
    {
        $ampersand = '&';
        if ($escapedAmpersands) {
            $ampersand = '&amp;';
        }
        $getVariableNameFilter = $this->getSortFilterDisplayNames('FILTER', 'getVariable');
        $getVariableNameSort = $this->getSortFilterDisplayNames('SORT', 'getVariable');

        return $this->Link() . '?' .
            $getVariableNameFilter . '=' . $this->getMyUserPreferencesDefault('FILTER') . $ampersand .
            $getVariableNameSort . '=' . $this->getMyUserPreferencesDefault('SORT') . $ampersand .
            'reload=1';
    }

    /**
     * Link to the search results.
     *
     * @return string
     */
<<<<<<< HEAD
    public function SearchResultLink(): string
    {
<<<<<<< HEAD
        return $this->Link('searchresults');
    }

=======
        if ($this->HasSearchResults() && ! $this->isSearchResults) {
            return $this->Link('searchresults/' . $this->lastSearchHash());
        }
        return '';
    }

    /****************************************************
     *  DEBUG
    /****************************************************/

    public function debug()
    {
        $member = Security::getCurrentUser();
        if (! $member || ! $member->IsShopAdmin()) {
            $messages = [
                'default' => 'You must login as an admin to use debug functions.',
            ];
            Security::permissionFailure($this, $messages);
        }
        $this->ProductsShowable();
        $html = EcommerceTaskDebugCart::debug_object($this->dataRecord);
        $html .= '<ul>';

        $html .= '<li><hr /><h3>Available options</h3><hr /></li>';
        $html .= '<li><b>Sort Options for Dropdown:</b><pre> ' . print_r($this->getUserPreferencesOptionsForDropdown('SORT'), 1) . '</pre> </li>';
        $html .= '<li><b>Filter Options for Dropdown:</b><pre> ' . print_r($this->getUserPreferencesOptionsForDropdown('FILTER'), 1) . '</pre></li>';
        $html .= '<li><b>Display Styles for Dropdown:</b><pre> ' . print_r($this->getUserPreferencesOptionsForDropdown('DISPLAY'), 1) . '</pre> </li>';

        $html .= '<li><hr /><h3>Selection Setting (what is set as default for this page)</h3><hr /></li>';
        $html .= '<li><b>MyDefaultFilter:</b> ' . $this->getMyUserPreferencesDefault('FILTER') . ' </li>';
        $html .= '<li><b>MyDefaultSortOrder:</b> ' . $this->getMyUserPreferencesDefault('SORT') . ' </li>';
        $html .= '<li><b>MyDefaultDisplayStyle:</b> ' . $this->getMyUserPreferencesDefault('DISPLAY') . ' </li>';
        $html .= '<li><b>MyNumberOfProductsPerPage:</b> ' . $this->MyNumberOfProductsPerPage() . ' </li>';
        $html .= '<li><b>MyLevelOfProductsToshow:</b> ' . $this->MyLevelOfProductsToShow() . ' = ' . (isset($this->showProductLevels[$this->MyLevelOfProductsToShow()]) ? $this->showProductLevels[$this->MyLevelOfProductsToShow()] : 'ERROR!!!! $this->showProductLevels not set for ' . $this->MyLevelOfProductsToShow()) . ' </li>';

        $html .= '<li><hr /><h3>Current Settings</h3><hr /></li>';
        $html .= '<li><b>Current Sort Order:</b> ' . $this->getCurrentUserPreferences('SORT') . ' </li>';
        $html .= '<li><b>Current Filter:</b> ' . $this->getCurrentUserPreferences('FILTER') . ' </li>';
        $html .= '<li><b>Current display style:</b> ' . $this->getCurrentUserPreferences('DISPLAY') . ' </li>';

        $html .= '<li><hr /><h3>DATALIST: totals, numbers per page etc</h3><hr /></li>';
        $html .= '<li><b>Total number of products:</b> ' . $this->TotalCount() . ' </li>';
        $html .= '<li><b>Is there more than one product:</b> ' . ($this->TotalCountGreaterThanOne() ? 'YES' : 'NO') . ' </li>';
        $html .= '<li><b>Number of products per page:</b> ' . $this->MyNumberOfProductsPerPage() . ' </li>';

        $html .= '<li><hr /><h3>SQL Factors</h3><hr /></li>';
        $html .= '<li><b>Default sort SQL:</b> ' . print_r($this->getUserSettingsOptionSQL('SORT'), 1) . ' </li>';
        $html .= '<li><b>User sort SQL:</b> ' . print_r($this->getUserSettingsOptionSQL('SORT', $this->getCurrentUserPreferences('SORT')), 1) . ' </li>';
        $html .= '<li><b>Default Filter SQL:</b> <pre>' . print_r($this->getUserSettingsOptionSQL('FILTER'), 1) . '</pre> </li>';
        $html .= '<li><b>User Filter SQL:</b> <pre>' . print_r($this->getUserSettingsOptionSQL('FILTER', $this->getCurrentUserPreferences('FILTER')), 1) . '</pre> </li>';
        $html .= '<li><b>Buyable Class name:</b> ' . $this->getBuyableClassName() . ' </li>';
        $html .= '<li><b>allProducts:</b> ' . print_r(str_replace('"', '`', $this->allProducts->sql()), 1) . ' </li>';

        $html .= '<li><hr /><h3>Search</h3><hr /></li>';
        $resultArray = $this->searchResultsArrayFromSession();
        $productGroupArray = $this->searchResultsProductGroupsArrayFromSession();
        $html .= '<li><b>Is Search Results:</b> ' . ($this->IsSearchResults() ? 'YES' : 'NO') . ' </li>';
        $html .= '<li><b>Products In Search:</b> ' . print_r($resultArray, 1) . ' </li>';
        $html .= '<li><b>Product Groups In Search:</b> ' . print_r($productGroupArray, 1) . ' </li>';

        $html .= '<li><hr /><h3>Other</h3><hr /></li>';
        if ($image = $this->BestAvailableImage()) {
            $html .= '<li><b>Best Available Image:</b> <img src="' . $image->Link . '" /> </li>';
        }
        $html .= '<li><b>BestAvailableImage:</b> ' . ($this->BestAvailableImage() ? $this->BestAvailableImage()->Link : 'no image available') . ' </li>';
        $html .= '<li><b>Is this an ecommerce page:</b> ' . ($this->IsEcommercePage() ? 'YES' : 'NO') . ' </li>';
        $html .= '<li><hr /><h3>Related Groups</h3><hr /></li>';
        $html .= '<li><b>Parent product group:</b> ' . ($this->ParentGroup() ? $this->ParentGroup()->Title : '[NO PARENT GROUP]') . '</li>';

        $childGroups = $this->ChildGroups(99);
        if ($childGroups->count()) {
            $childGroups = $childGroups->map('ID', 'MenuTitle');
            $html .= '<li><b>Child Groups (all):</b><pre> ' . print_r($childGroups, 1) . ' </pre></li>';
        } else {
            $html .= '<li><b>Child Groups (full tree): </b>NONE</li>';
        }
        $html .= '<li><b>a list of Product Groups that have the products for the CURRENT product group listed as part of their AlsoShowProducts list:</b><pre>' . print_r($this->ProductGroupsFromAlsoShowProducts()->map('ID', 'Title')->toArray(), 1) . ' </pre></li>';
        $html .= '<li><b>the inverse of ProductGroupsFromAlsoShowProducts:</b><pre> ' . print_r($this->ProductGroupsFromAlsoShowProductsInverse()->map('ID', 'Title')->toArray(), 1) . ' </pre></li>';
        $html .= '<li><b>all product parent groups:</b><pre> ' . print_r($this->ProductGroupsParentGroups()->map('ID', 'Title')->toArray(), 1) . ' </pre></li>';

        $html .= '<li><hr /><h3>Product Example and Links</h3><hr /></li>';
        $product = DataObject::get_one(
            Product::class,
            ['ParentID' => $this->ID]
        );
        if ($product) {
            $html .= '<li><b>Product View:</b> <a href="' . $product->Link() . '">' . $product->Title . '</a> </li>';
            $html .= '<li><b>Product Debug:</b> <a href="' . $product->Link('debug') . '">' . $product->Title . '</a> </li>';
            $html .= '<li><b>Product Admin Page:</b> <a href="' . '/admin/pages/edit/show/' . $product->ID . '">' . $product->Title . '</a> </li>';
            $html .= '<li><b>ProductGroup Admin Page:</b> <a href="' . '/admin/pages/edit/show/' . $this->ID . '">' . $this->Title . '</a> </li>';
        } else {
            $html .= '<li>this page has no products of its own</li>';
        }
        $html .= '</ul>';

        return $html;
    }

    protected function lastSearchHash(): string
    {
        return (string) $this->getRequest()->getSession()->get($this->SearchResultsSessionVariable());
    }

    /**
     * standard SS method.
     */
>>>>>>> master
=======
    public function SearchResultLink()
    {
        return $this->Link('searchresults');
    }

>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
    protected function init()
    {
        parent::init();
        $this->originalTitle = $this->Title;
<<<<<<< HEAD
<<<<<<< HEAD

        // TODO: find replacement for: Requirements::themedCSS('sunnysideup/ecommerce: ProductGroup', 'ecommerce');
        // TODO: find replacement for: Requirements::themedCSS('sunnysideup/ecommerce: ProductGroupPopUp', 'ecommerce');
=======
        Requirements::themedCSS('ProductGroup');
        Requirements::themedCSS('ProductGroupPopUp');
>>>>>>> master
        Requirements::javascript('sunnysideup/ecommerce: client/javascript/EcomProducts.js');
        //we save data from get variables...
        $this->saveUserPreferences();

=======
        Requirements::themedCSS('ProductGroup');
        Requirements::themedCSS('ProductGroupPopUp');
        Requirements::javascript('sunnysideup/ecommerce: client/javascript/EcomProducts.js');
        //we save data from get variables...
        $this->saveUserPreferences();
        //makes sure best match only applies to search -i.e. reset otherwise.
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
        if ($this->request->param('Action') !== 'searchresults') {
            $sortKey = $this->getCurrentUserPreferences('SORT');

            if ($sortKey === Config::inst()->get(ProductGroupSearchPage::class, 'best_match_key')) {
                $this->resetsort();
            }
        }
    }

    protected function getSearchResultsDefaultSort($idArray, $alternativeSort = null)
    {
        if (! $alternativeSort) {
            $sortGetVariable = $this->getSortFilterDisplayNames('SORT', 'getVariable');
            if (! $this->request->getVar($sortGetVariable)) {
                $suggestion = Config::inst()->get(ProductGroupSearchPage::class, 'best_match_key');
                if ($suggestion) {
                    $this->saveUserPreferences(
                        [
                            $sortGetVariable => $suggestion,
                        ]
                    );
                }
            }
        }
        return $alternativeSort;
    }

    /**
     * Overload this function of ProductGroup Extensions.
     *
     * @return bool
     */
    protected function returnAjaxifiedProductList()
    {
        return Director::is_ajax() ? true : false;
    }

    /**
     * Overload this function of ProductGroup Extensions.
     *
     * @return bool
     */
    protected function productListsHTMLCanBeCached()
    {
        return Config::inst()->get(ProductGroup::class, 'actively_check_for_can_purchase') ? false : true;
    }

    /**
     * counts the total number in the combination....
     *
<<<<<<< HEAD
<<<<<<< HEAD
     * @param ProductGroup[] $groups
     * @param Array  $baseArray - list of products on the current page
=======
     * @param \SilverStripe\ORM\DataList $items     - list of
     * @param array    $baseArray - list of products on the current page
>>>>>>> master
=======
     * @param ProductGroup[] $groups
     * @param array  $baseArray - list of products on the current page
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e
     *
     * @return array
     */
    protected function productGroupFilterLinksCount($groups, $baseArray, $ajaxify = true)
    {
        $array = [];

        if ($groups) {
            foreach ($groups as $item) {
                $arrayOfIDs = $item->currentInitialProductsAsCachedArray($this->getMyUserPreferencesDefault('FILTER'));
                $newArray = array_intersect_key(
                    $arrayOfIDs,
                    $baseArray
                );

                $count = count($newArray);

                if ($count) {
                    $array[$item->Title] = [
                        'Item' => $item,
                        'Count' => $count,
                        'Ajaxify' => $ajaxify,
                    ];
                }
            }
        }

        return $array;
    }

    /**
     * @param array $itemInArray (Item, Count, UserFilterAction)
     *
     * @return ArrayData
     */
    protected function makeArrayItem($itemInArray)
    {
        $item = $itemInArray['Item'];
        $count = $itemInArray['Count'];
        $ajaxify = $itemInArray['Ajaxify'];
        $filterForGroupObjectID = $this->filterForGroupObject ? $this->filterForGroupObject->ID : 0;
        $isCurrent = ($item->ID === $filterForGroupObjectID ? true : false);

        if ($ajaxify) {
            $link = $this->Link($item->FilterForGroupLinkSegment());
        } else {
            $link = $item->Link();
        }

        return [
            'ID' => $item->ID,
            'ClassName' => $item->ClassName,
            'Title' => $item->Title,
            'Count' => $count,
            'SelectKey' => $item->URLSegment,
            'Current' => $isCurrent ? true : false,
            'MyLinkingMode' => $isCurrent ? 'current' : 'link',
            'FilterLink' => $link,
            'Ajaxify' => $ajaxify ? true : false,
        ];
    }

    /**
     * Checks out a bunch of $_GET variables that are used to work out user
     * preferences.
     *
     * Some of these are saved to session.
     *
     * @param array $overrideArray - override $_GET variable settings
     */
    protected function saveUserPreferences($overrideArray = [])
    {
        $sortFilterDisplayNames = $this->getSortFilterDisplayNames();

        foreach ($sortFilterDisplayNames as $type => $oneTypeArray) {
            $getVariableName = $oneTypeArray['getVariable'];
            $sessionName = $oneTypeArray['sessionName'];

            if (isset($overrideArray[$getVariableName])) {
                $newPreference = $overrideArray[$getVariableName];
            } else {
                $newPreference = $this->request->getVar($getVariableName);
            }

            if ($newPreference) {
                $optionsVariableName = $oneTypeArray['configName'];
                $options = EcommerceConfig::get($this->ClassName, $optionsVariableName);
                if (isset($options[$newPreference])) {
                    $this->getRequest()->getSession()->set('ProductGroup_' . $sessionName, $newPreference);
                    //save in model as well...
                }
            } else {
                $newPreference = $this->getRequest()->getSession()->get('ProductGroup_' . $sessionName);
            }

            if ($newPreference) {
                $this->setCurrentUserPreference($type, $newPreference);
            }
        }

        if ($this->request->getVar('reload')) {
<<<<<<< HEAD
<<<<<<< HEAD
            $this->getRequest()->getSession()->set($this->SearchResultsSessionVariable(false), '');

            $this->getRequest()->getSession()->set($this->SearchResultsSessionVariable(true), '');
=======
            //reset other session variables...

            $this->getRequest()->getSession()->set($this->SearchResultsSessionVariable(), '');
>>>>>>> master
=======
            // $this->getRequest()->getSession()->set($this->SearchResultsSessionVariable(false), '');
            //
            // $this->getRequest()->getSession()->set($this->SearchResultsSessionVariable(true), '');
>>>>>>> d5a46ab55f13265fb6c83bb9c79a9614bffb798e

            return $this->redirect($this->Link());
        }
    }

    /**
     * Checks for the most applicable user preferences for this user:
     * 1. session value
     * 2. getMyUserPreferencesDefault.
     *
     * @param string $type - FILTER | SORT | DISPLAY
     *
     * @return string
     *
     * @todo: move to controller?
     */
    protected function getCurrentUserPreferences($type)
    {
        $sessionName = $this->getSortFilterDisplayNames($type, 'sessionName');
        if ($sessionValue = $this->getRequest()->getSession()->get('ProductGroup_' . $sessionName)) {
            $key = Convert::raw2sql($sessionValue);
        } else {
            $key = $this->getMyUserPreferencesDefault($type);
        }
        return $this->getBestKeyAndValidateKey($type, $key);
    }

    /**
     * Provides a dataset of links for a particular user preference.
     *
     * @param string $type SORT | FILTER | DISPLAY - e.g. sort_options
     *
     * @return \SilverStripe\ORM\ArrayList( ArrayData(Name, Link,  SelectKey, Current (boolean), LinkingMode))
     */
    protected function userPreferencesLinks($type)
    {
        // get basics
        $sortFilterDisplayNames = $this->getSortFilterDisplayNames();
        $options = $this->getConfigOptions($type);

        // if there is only one option then do not bother
        if (count($options) < 2) {
            return;
        }

        // get more config names
        $translationCode = $sortFilterDisplayNames[$type]['translationCode'];
        $getVariableName = $sortFilterDisplayNames[$type]['getVariable'];
        $arrayList = ArrayList::create();

        if (count($options)) {
            foreach ($options as $key => $array) {
                $link = '?' . $getVariableName . "=${key}";

                if ($type === 'FILTER') {
                    $link = $this->Link() . $link;
                } else {
                    $link = $this->request->getVar('url') . $link;
                }

                $arrayList->push(ArrayData::create([
                    'Name' => _t('ProductGroup.' . $translationCode . strtoupper(str_replace(' ', '', $array['Title'])), $array['Title']),
                    'Link' => $link,
                    'SelectKey' => $key,
                ]));
            }
        }

        return $arrayList;
    }

    /**
     * Add a secondary title to the main title in case there is, for example, a
     * filter applied (e.g. Socks | MyBrand).
     *
     * @param string $secondaryTitle
     */
    protected function addSecondaryTitle($secondaryTitle = '')
    {
        $pipe = _t('ProductGroup.TITLE_SEPARATOR', ' | ');
        if (! $this->secondaryTitleHasBeenAdded) {
            if (trim($secondaryTitle)) {
                $secondaryTitle = $pipe . $secondaryTitle;
            }

            if ($this->IsSearchResults()) {
                $count = $this->getProductList()->getRawCount();

                if ($count) {
                    $toAdd = $count . ' ' . _t('ProductGroup.PRODUCTS_FOUND', 'Products Found');
                    $secondaryTitle .= $this->cleanSecondaryTitleForAddition($pipe, $toAdd);
                } else {
                    $toAdd = _t('ProductGroup.SEARCH_RESULTS', 'Search Results');
                    $secondaryTitle .= $this->cleanSecondaryTitleForAddition($pipe, $toAdd);
                }
            }
            if (is_object($this->filterForGroupObject)) {
                $toAdd = $this->filterForGroupObject->Title;
                $secondaryTitle .= $this->cleanSecondaryTitleForAddition($pipe, $toAdd);
            }

            $filter = $this->getCurrentUserPreferences('FILTER');

            if ($filter !== $this->getMyUserPreferencesDefault('FILTER')) {
                $toAdd = $this->getUserPreferencesTitle('FILTER', $this->getCurrentUserPreferences('FILTER'));
                $secondaryTitle .= $this->cleanSecondaryTitleForAddition($pipe, $toAdd);
            }

            if ($this->HasSort()) {
                $toAdd = $this->getUserPreferencesTitle('SORT', $this->getCurrentUserPreferences('SORT'));
                $secondaryTitle .= $this->cleanSecondaryTitleForAddition($pipe, $toAdd);
            }

            if ($pageStart = intval($this->request->getVar('start'))) {
                if ($pageStart > 0) {
                    $page = ($pageStart / $this->getProductsPerPage()) + 1;
                    $toAdd = _t('ProductGroup.PAGE', 'Page') . ' ' . $page;
                    $secondaryTitle .= $this->cleanSecondaryTitleForAddition($pipe, $toAdd);
                }
            }

            if ($secondaryTitle) {
                $this->Title .= $secondaryTitle;

                if (isset($this->MetaTitle)) {
                    $this->MetaTitle .= $secondaryTitle;
                }

                if (isset($this->MetaDescription)) {
                    $this->MetaDescription .= $secondaryTitle;
                }
            }

            // dont update menu title, because the entry in the menu
            // should stay the same as it links back to the unfiltered
            // page (in some cases).

            $this->secondaryTitleHasBeenAdded = true;
        }
    }

    /**
     * removes any spaces from the 'toAdd' bit and adds the pipe if there is
     * anything to add at all.  Through the lang files, you can change the pipe
     * symbol to anything you like.
     *
     * @param  string $pipe
     * @param  string $toAdd
     * @return string
     */
    protected function cleanSecondaryTitleForAddition($pipe, $toAdd)
    {
        $toAdd = trim($toAdd);
        $length = strlen($toAdd);

        if ($length > 0) {
            $toAdd = $pipe . $toAdd;
        }

        return $toAdd;
    }
}
